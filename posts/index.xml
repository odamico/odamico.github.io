<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Oscar D&#39;amico</title>
		<link>https://odamico.github.io/posts/</link>
		<description>Recent content in Posts on Oscar D&#39;amico</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Sun, 19 Jan 2020 00:00:00 +0000</lastBuildDate>
		<atom:link href="https://odamico.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>ARP poisoning using Kali Linux</title>
			<link>https://odamico.github.io/posts/arppoisoning/</link>
			<pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://odamico.github.io/posts/arppoisoning/</guid>
			<description>One of the fundamental protocols in the TCP/IP stack is the address resolution protocol, or ARP for short. This protocol maps IPv4 addresses to MAC addresses but performs no authentication by design. Because of this, we can send our own ARP traffic onto the network claiming to own an IP address which we really don&#39;t. In this post, I will be using this to my advantage in an ARP spoofing attack.</description>
			<content type="html"><![CDATA[<p>One of the fundamental protocols in the TCP/IP stack is the address resolution protocol, or ARP for short.
This protocol maps IPv4 addresses to MAC addresses but performs no authentication by design.
Because of this, we can send our own ARP traffic onto the network claiming to own an IP address which we really don't.
In this post, I will be using this to my advantage in an ARP spoofing attack. First, let's look at my networking setup.</p>
<figure>
    <img src="https://odamico.github.io/setup.png"
         alt="Lab Network Diagram"/> <figcaption>
            <p>Lab Network Diagram</p>
        </figcaption>
</figure>

<p>My kali attacker will be forging arp packets claiming to be the ISP router and victim machine. This will allow the attacker to listen
in on communications between the router and the victim (and later on, to alter those communications).</p>
<p>Firstly, lets open up ettercap using the following command on our attacker</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">$ ettercap -G
</code></pre></div><p>Once it's open, we select our bridged interface and click the &ldquo;accept&rdquo; button:</p>
<figure>
    <img src="https://odamico.github.io/ettercap-G.png"
         alt="Ettercap interface"/> <figcaption>
            <p>Ettercap GUI</p>
        </figcaption>
</figure>

<p>Then, we can perform host discovery by clicking the &ldquo;scan&rdquo; button as seen below:</p>
<figure>
    <img src="https://odamico.github.io/scan.png"
         alt="Ettercap scan button"/> <figcaption>
            <p>Host discovery on 192.168.17.0/24</p>
        </figcaption>
</figure>

<p>Since we know the hosts at 192.168.17.1 and 192.168.17.26 are our targets from our network diagram, we can just click to add
the .1 entry to target 2 and the .26 entry to target 1. We should see these messages in the ettercap console to confirm:</p>
<figure>
    <img src="https://odamico.github.io/ettercapConsole.png"
         alt="Ettercap console interface"/> <figcaption>
            <p>Ettercap text console</p>
        </figcaption>
</figure>

<p>With our targets in place, we select &ldquo;MITM Menu&rdquo; &ndash;&gt; &ldquo;ARP Poisoning&hellip;&rdquo; &ndash;&gt; &ldquo;Ok&rdquo; to start sending out our ARP packets.
The confirmation can be seen in the console once again:</p>
<figure>
    <img src="https://odamico.github.io/Victims.png"
         alt="Ettercap&#39;s confirmation of victim groups being poisoned"/> <figcaption>
            <p>Ettercap text console confirming our victims are being poisoned</p>
        </figcaption>
</figure>

<p>Why don't we perform a little bit of traffic analysis to see what ettercap is actually doing behind the scenes?
Below is a tcpdump capture of the arp traffic that the attacker's network interface is seeing.</p>
<figure>
    <img src="https://odamico.github.io/tcpdumpARP.png"
         alt="tcpdump on kali linux capturing ARP packets on eth0"/> <figcaption>
            <p>tcpdump ARP packet capture</p>
        </figcaption>
</figure>

<p>From the tcpdump output, we can see that the attacker responds to several ARP requests. The third ARP packet shows the attacker replying,
saying that it is the owner of 192.168.17.25. This is true, that's our DHCP-assigned address. However, we can see that the attacker
is also replying to queries for 192.168.17.26 and 192.168.17.1. The attacker is claiming that its MAC address of 00:0c:29:57:e9:0d
corresponds to both of those IP addresses in ARP packet numbers 6 and 7 of our capture. I included the ip command output at the bottom
to show that that really is our attacker's MAC address.</p>
<p>Next, let's check on our victim to see if our attack worked. To do this, I will ping the gateway from the victim and see the
results in our attacker's wireshark packet capture.</p>
<figure>
    <img src="https://odamico.github.io/arpPing.png"
         alt="Ping from windows xp victim"/> <figcaption>
            <p>Ping to gateway from windows xp victim</p>
        </figcaption>
</figure>

<figure>
    <img src="https://odamico.github.io/sharkICMP.png"
         alt="wireshark on kali linux capturing ICMP packets between the gateway and victim"/> <figcaption>
            <p>wireshark ICMP packet capture</p>
        </figcaption>
</figure>

<p>Not only can we see icmp, we can also see http traffic as shown below:</p>
<figure>
    <img src="https://odamico.github.io/httpCapture.png"
         alt="Eavesdropping on the vicitm&#39;s web traffic"/> <figcaption>
            <p>HTTP traffic in wireshark</p>
        </figcaption>
</figure>

<p>We've succesfully performed a basic ARP spoofing attack. In the future, I'd
like to expand on this attack and get into spoofing some services, so stay
tuned for a part 2!</p>
]]></content>
		</item>
		
		<item>
			<title>Data Science Project: Creating a Command Line Pokedex in Python3</title>
			<link>https://odamico.github.io/posts/minidex/</link>
			<pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://odamico.github.io/posts/minidex/</guid>
			<description>Solving interesting problems and creating neat applications have always been the best motivators for me to program. While playing Pokemon Sun, I found myself googling the new species I would encounter quite often. I would take time to look at their stats and what they were weak to and strong against. These searches started taking up time very quickly. For reference, each page contains a table of contents like this:</description>
			<content type="html"><![CDATA[<p>Solving interesting problems and creating neat applications have always been the best
motivators for me to program. While playing Pokemon Sun, I found myself
googling the new species I would encounter quite often. I would take time to
look at their stats and what they were weak to and strong against. These searches started
taking up time very quickly. For reference, each page contains a table of contents like this:</p>
<figure><a href="https://bulbapedia.bulbagarden.net/wiki/Mimikyu_%28Pok%C3%A9mon%29">
    <img src="https://odamico.github.io/contents.png"
         alt="Bulbapedia table of contents for Mimikyu"/> </a><figcaption>
            <p>The bulbapedia page for one Pokemon - Mimikyu</p>
        </figcaption>
</figure>

<p>That is quite a lot of information. Especially when all the data I needed could be represented
in a couple of lines of text. I felt like I could program a solution that fit my needs more
closely. My goal with minidex.py was to create a tool that met the following requirements:</p>
<ul>
<li>Provide a quick search by Pokemon name.</li>
<li>Return relevant information for each pokemon that fit the search.</li>
<li>Include the type effectiveness for each pokemon.</li>
<li>Update regularly, in case new species are released, but don't constantly pull data from the internet.</li>
</ul>
<p>The source code for my solution can be found on my github at <a href="https://github.com/odamico/minidex.py">https://github.com/odamico/minidex.py</a> along
with instructions for how to get the program up and running in the README.md file. Here, I will
be demonstrating the program's use.</p>
<p>You can run minidex.py program like so:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">./minidex.py
</code></pre></div><pre><code>[-] Critical file dex_data.csv corrupted...
[-] Critical file type_data.csv corrupted...
[-] Database file contains no data or is outdated
Updating it now...
[-] Type chart file contains no data or is outdated
Updating it now...

                                  ,'\
    _.----.        ____         ,'  _\   ___    ___     ____
_,-'       `.     |    |  /`.   \,-'    |   \  /   |   |    \  |`.
\      __    \    '-.  | /   `.  ___    |    \/    |   '-.   \ |  |
 \.    \ \   |  __  |  |/    ,','_  `.  |          | __  |    \|  |
   \    \/   /,' _`.|      ,' / / / /   |          ,' _`.|     |  |
    \     ,-'/  /   \    ,'   | \/ / ,`.|         /  /   \  |     |
     \    \ |   \_/  |   `-.  \    `'  /|  |    ||   \_/  | |\    |
      \    \ \      /       `-.`.___,-' |  |\  /| \      /  | |   |
       \    \ `.__,'|  |`-._    `|      |__| \/ |  `.__,'|  | |   |
        \_.-'       |__|    `-._ |              '-.|     '-.| |   |
                                `'                            '-._|
-------------------------------------------------------------------------
Search by Pok√©mon name [q --&gt; quit, + --&gt; keep printing]
&gt; 
</code></pre><p>On the first run, we see that two database files, and two checksums are saved in
the directory that the program was run from. At the minidex prompt, you can enter
a name to look up. For example, lets look up one of my personal favorites, Slaking:</p>
<pre><code>-------------------------------------------------------------------------
Search by Pok√©mon name [q --&gt; quit, + --&gt; keep printing]
&gt; Slaking
</code></pre><p>The following output is produced:</p>
<pre><code>


----------------------------------------------------------------------------------+
 Pok√©dex #     Name    Type  Total   HP  Attack  Defense  Sp. Atk  Sp. Def  Speed |
----------------------------------------------------------------------------------+
       289  slaking  normal    670  150     160      100       95       65    100 |
	Nor Fir Wat Ele Gra Ice Fig Poi Gro Fly Psy Bug Roc Gho Dra Dar Ste Fai   |
	 -   -   -   -   -   -    2  -   -   -   -   -   -    0  -   -   -   -    |
----------------------------------------------------------------------------------+


Matches:  1
</code></pre><p>We get the pokedex number, name, type, stat total, and each individual stat in the first row
of data which appears after the header. The second row of data displays every type's effectiveness against Slaking. For example,
we can see that Normal, Fire, and Water are unmodified, as they contain a value of &ldquo;-&quot;. However,
Slaking is two-times weak to Fighting, which shows a &ldquo;2&rdquo; and unaffected by Ghost which contains a &ldquo;0&rdquo;.
Other possible values include 4, 1/2, and 1/4.</p>
<p>By default, the output is truncated to 10 entries when we enter a query that produces a large number
of matches. But we can extend the output to include all matches by using the &lsquo;+&rsquo; flag. For example:</p>
<pre><code>-------------------------------------------------------------------------
Search by Pok√©mon name [q --&gt; quit, + --&gt; keep printing]
&gt; S+
</code></pre><p>The above query returns all pokemon whose names start with &ldquo;s&rdquo;.</p>
<p>To speed things up a little bit, we can enter our query as an argument when running the
program. For example, we can run the program as follows:</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">./minidex.py Muk
</code></pre></div><pre><code>


----------------------------------------------------------------------------------------------+
 Pok√©dex #            Name         Type  Total   HP  Attack  Defense  Sp. Atk  Sp. Def  Speed |
----------------------------------------------------------------------------------------------+
        89             muk       poison    500  105     105       75       65      100     50 |
	Nor Fir Wat Ele  Gra Ice  Fig  Poi Gro Fly Psy  Bug Roc Gho Dra Dar Ste  Fai          |
	 -   -   -   -   1/2  -   1/2  1/2   2  -    2  1/2  -   -   -   -   -   1/2          |
----------------------------------------------------------------------------------------------+
        89  muk alolan muk  poison dark    500  105     105       75       65      100     50 |
	Nor Fir Wat Ele  Gra Ice Fig  Poi Gro Fly Psy Bug Roc  Gho Dra  Dar Ste Fai           |
	 -   -   -   -   1/2  -   -   1/2   2  -    0  -   -   1/2  -   1/2  -   -            |
----------------------------------------------------------------------------------------------+
       771       pyukumuku        water    410   55      60      130       30      130      5 |
	Nor  Fir  Wat Ele Gra  Ice Fig Poi Gro Fly Psy Bug Roc Gho Dra Dar  Ste Fai           |
	 -   1/2  1/2   2   2  1/2  -   -   -   -   -   -   -   -   -   -   1/2  -            |
----------------------------------------------------------------------------------------------+


Matches:  3
</code></pre>]]></content>
		</item>
		
		<item>
			<title>My First Post Using Hugo and Github Pages</title>
			<link>https://odamico.github.io/posts/post-title/</link>
			<pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
			
			<guid>https://odamico.github.io/posts/post-title/</guid>
			<description>Hello world! Welcome to my new GitHub Pages blog This site was generated using Hugo, a fast and simple framework for building static webpages. Hugo works nicely with GitHub pages for hosting simple web content. I hope to post personal projects and guides related to information security, programming, game development, data science, and more!</description>
			<content type="html"><![CDATA[<h1 id="hello-world">Hello world!</h1>
<h3 id="welcome-to-my-new-github-pages-blog">Welcome to my new GitHub Pages blog</h3>
<p>This site was generated using Hugo, a fast and simple framework for building static webpages.
Hugo works nicely with GitHub pages for hosting simple web content. I hope to post personal projects and guides
related to information security, programming, game development, data science, and more!</p>
]]></content>
		</item>
		
	</channel>
</rss>
